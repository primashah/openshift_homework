def GUID="prima"
def CLUSTER = "na39.openshift.opentlc.com"
// Jenkinsfile for mlbparks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "1.5Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `mlbparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def projectName="MLBParks"
    def mvnCmd = "mvn -s ./nexus_settings.xml -f ${projectName}/pom.xml"
    // def mvnCmd = "mvn"

    // Checkout Source Code
    stage('Checkout Source') {
      git url: "https://github.com/primashah/openshift_homework.git"
    }

    // The following variables need to be defined at the top level
    // and not inside the scope of a stage - otherwise they would not
    // be accessible from other stages.
    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("${projectName}/pom.xml")
    def artifactId = getArtifactIdFromPom("${projectName}/pom.xml")
    def version    = getVersionFromPom("${projectName}/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    
    stage('Build jar') {
      echo "Building version ${version}"
      sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
    }

    
    stage('Unit Tests') {
      echo "Running Unit Tests"
      sh "${mvnCmd} test"
    }

    
    stage('Code Analysis') {
      echo "Running Code Analysis"
      sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://docker-openshift-sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    }

    stage('Publish to Nexus') {
      echo "Publish to Nexus"
      sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
    }

    
    stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image mlbparks:${devTag}"
      sh "oc start-build mlbparks --follow --from-file=./${projectName}/target/mlbparks.jar -n ${GUID}-parks-dev"
      openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }

    
    stage('Deploy to Dev') {
      echo "Deploying container image to Development Project"
      sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"
      openshiftDeploy depCfg: 'mlbparks', namespace: "${GUID}-parks-dev", verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: 'mlbparks', namespace: "${GUID}-parks-dev", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyService namespace: "${GUID}-parks-dev", svcName: 'mlbparks', verbose: 'false'
    }

    
    stage('Integration Tests') {
      echo "Running Integration Tests"
      sh "curl http://mlbparks.$GUID-parks-dev.svc.cluster.local:8080/ws/backends/list/"
      sh "curl http://mlbparks.$GUID-parks-dev.svc.cluster.local:8080/ws/appname/"
    }


    stage('Copy Image to Nexus Docker Registry') {
      echo "Copy image to Nexus Docker Registry"
      sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/$GUID-parks-dev/mlbparks:${devTag} docker://nexus-registry.$GUID-nexus.svc.cluster.local:5000/mlbparks:${devTag}"
      openshiftTag alias: 'false', destStream: 'mlbparks', destTag: prodTag, destinationNamespace: "$GUID-parks-dev", namespace: "$GUID-parks-dev", srcStream: 'mlbparks', srcTag: devTag, verbose: 'false'
    }

    // Blue/Green Deployment into Production
    def destApp   = "mlbparks-green"
    def activeApp = ""

    stage('Blue/Green Production Deployment') {
      activeApp = sh(returnStdout: true, script: "oc get route mlbparks -n $GUID-parks-prod -o jsonpath='{ .spec.to.name }'").trim()

      if (activeApp == "mlbparks-green") {
        destApp = "mlbparks-blue"
      }

      echo "Active Application:      " + activeApp
      echo "Destination Application: " + destApp

      sh "oc tag ${GUID}-parks-dev/mlbparks:${devTag} ${GUID}-parks-prod/${destApp}:${prodTag}"
      sh "oc set image dc/${destApp} mlbparks=${destApp}:${prodTag} --source=istag -n ${GUID}-parks-prod"
     
    }

    stage('Switch over to new Version') {
      echo "Switching Production application to ${destApp}."
      sh "oc rollout latest dc/${destApp} -n $GUID-parks-prod"
      sh "oc rollout status dc/${destApp} --watch -n $GUID-parks-prod"
      sh "oc patch route/mlbparks -p '{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}' -n $GUID-parks-prod"
      sh "oc rollout latest dc/${destApp} -n $GUID-parks-prod"
      sh "oc rollout status dc/${destApp} --watch -n $GUID-parks-prod"
      sh "oc scale dc/${destApp} --replicas=1 -n $GUID-parks-prod"
      sh "oc scale dc/${activeApp} --replicas=0 -n $GUID-parks-prod"
    }

  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
